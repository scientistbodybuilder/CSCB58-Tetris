######################################################################
# CSCB58 Summer 2024 Assembly Final Project - UTSC
# Student1: Ousman, 1008435267 jikineho, o.jikineh@mail.utoronto.ca
#
# Bitmap Display Configuration:
# - Unit width in pixels: 16 (update this as needed)
# - Unit height in pixels: 16 (update this as needed)
# - Display width in pixels: 512 (update this as needed)
# - Display height in pixels: 512 (update this as needed)
# - Base Address for Display: 0x10008000 ($gp)
#
# Which milestones have been reached in this submission?
# (See the assignment handout for descriptions of the milestones)
# - Milestone 5 (choose the one the applies)
#
# Which approved features have been implemented? "use numbers from the handout"
# (See the assignment handout for the list of features)
# Easy Features:
# 1. Gravity
# 2. All tetrominoes are different colors
# 3. A timer that increases the block fall speed over time
# 4. A pause menu
# 5. A game over screen
# 6. A side panel that shows the preview of the next tetromino
# Hard Features:
# 1. Implemented all 7 tetrominoes
# How to play:
# When at the intro screen (just says tetris), pressing 'space' will start a new game, and pressing 'q' will quit the game
# When in the pause screen, press 'p' again to unpause, and press 'ESC' to go to the intro screen
# When in the game over screen, press 'r' to restart a fresh game, press 'ESC' or 'space' to go to the intro screen
# When in the game loop state, press 'p' to pause the game
# press 'wasd' to rotate, move left, down, and right respectively. Press
# Link to video demonstration for final submission:
# - (insert YouTube / MyMedia / other URL here). Make sure we can view it!
#
# Are you OK with us sharing the video with people outside course staff?
# - yes
#
# Any additional information that the TA needs to know:
# - (write here, if any)
#
######################################################################

.data
error: .asciiz "collision detected\n"

newline: .asciiz "\n"
rc: .asciiz "not highest row\n"
a: .asciiz "\ns0 before\n"
b: .asciiz "\ns0 after update\n"
pause_screen: .word 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0x85071e, 0x85071e, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x8dc211, 0x8dc211, 0x8dc211, 0x8dc211, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0xed1c24, 0xed1c24, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x8dc211, 0xa8e61d, 0xa8e61d, 0x8dc211, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0xed1c24, 0xed1c24, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x8dc211, 0xa8e61d, 0xa8e61d, 0x8dc211, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0x85071e, 0x85071e, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x8dc211, 0x8dc211, 0x8dc211, 0x8dc211, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0x85071e, 0x85071e, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x8dc211, 0x8dc211, 0x8dc211, 0x8dc211, 0x000000, 0x8dc211, 0x8dc211, 0x8dc211, 0x8dc211, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0xed1c24, 0xed1c24, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x8dc211, 0xa8e61d, 0xa8e61d, 0x8dc211, 0x000000, 0x8dc211, 0xa8e61d, 0xa8e61d, 0x8dc211, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0xed1c24, 0xed1c24, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x8dc211, 0xa8e61d, 0xa8e61d, 0x8dc211, 0x000000, 0x8dc211, 0xa8e61d, 0xa8e61d, 0x8dc211, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0x85071e, 0x85071e, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x8dc211, 0x8dc211, 0x8dc211, 0x8dc211, 0x000000, 0x8dc211, 0x8dc211, 0x8dc211, 0x8dc211, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0x85071e, 0x85071e, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x8dc211, 0x8dc211, 0x8dc211, 0x8dc211, 0x000000, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x000000, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x000000, 0x000000, 0x000000, 0x85071e, 0xed1c24, 0xed1c24, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x8dc211, 0xa8e61d, 0xa8e61d, 0x8dc211, 0x000000, 0x0fa4d1, 0x00b7ef, 0x00b7ef, 0x0fa4d1, 0x000000, 0x0fa4d1, 0x00b7ef, 0x00b7ef, 0x0fa4d1, 0x000000, 0x000000, 0x000000, 0x85071e, 0xed1c24, 0xed1c24, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x8dc211, 0xa8e61d, 0xa8e61d, 0x8dc211, 0x000000, 0x0fa4d1, 0x00b7ef, 0x00b7ef, 0x0fa4d1, 0x000000, 0x0fa4d1, 0x00b7ef, 0x00b7ef, 0x0fa4d1, 0x000000, 0x000000, 0x000000, 0x85071e, 0x85071e, 0x85071e, 0x85071e, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x8dc211, 0x8dc211, 0x8dc211, 0x8dc211, 0x000000, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x000000, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x85071e, 0x85071e, 0x85071e, 0x85071e, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x000000, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x000000, 0x000000, 0x000000, 0x85071e, 0xed1c24, 0xed1c24, 0x85071e, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x0fa4d1, 0x00b7ef, 0x00b7ef, 0x0fa4d1, 0x000000, 0x0fa4d1, 0x00b7ef, 0x00b7ef, 0x0fa4d1, 0x000000, 0x000000, 0x000000, 0x85071e, 0xed1c24, 0xed1c24, 0x85071e, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x0fa4d1, 0x00b7ef, 0x00b7ef, 0x0fa4d1, 0x000000, 0x0fa4d1, 0x00b7ef, 0x00b7ef, 0x0fa4d1, 0x000000, 0x000000, 0x000000, 0x85071e, 0x85071e, 0x85071e, 0x85071e, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x000000, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x0fa4d1, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
main_screen: .word 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xd41ec8, 0xf04fe8, 0xf04fe8, 0xd41ec8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xd41ec8, 0xf04fe8, 0xf04fe8, 0xd41ec8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0x000000, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0x000000, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0xd41ec8, 0xf04fe8, 0xf04fe8, 0xd41ec8, 0x000000, 0xd41ec8, 0xf04fe8, 0xf04fe8, 0xd41ec8, 0x000000, 0xd41ec8, 0xf04fe8, 0xf04fe8, 0xd41ec8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0xd41ec8, 0xf04fe8, 0xf04fe8, 0xd41ec8, 0x000000, 0xd41ec8, 0xf04fe8, 0xf04fe8, 0xd41ec8, 0x000000, 0xd41ec8, 0xf04fe8, 0xf04fe8, 0xd41ec8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0x000000, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0x000000, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0xd41ec8, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xe85500, 0xe85500, 0xe85500, 0xe85500, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x000000, 0x000000, 0xe85500, 0xff7e00, 0xff7e00, 0xe85500, 0x000000, 0x990030, 0xcf1d55, 0xcf1d55, 0x990030, 0x000000, 0x990030, 0xcf1d55, 0xcf1d55, 0x990030, 0x000000, 0x990030, 0xcf1d55, 0xcf1d55, 0x990030, 0x000000, 0x0e1ce6, 0x4d6df3, 0x4d6df3, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x4d6df3, 0x4d6df3, 0x0e1ce6, 0x000000, 0x000000, 0x000000, 0xe85500, 0xff7e00, 0xff7e00, 0xe85500, 0x000000, 0x990030, 0xcf1d55, 0xcf1d55, 0x990030, 0x000000, 0x990030, 0xcf1d55, 0xcf1d55, 0x990030, 0x000000, 0x990030, 0xcf1d55, 0xcf1d55, 0x990030, 0x000000, 0x0e1ce6, 0x4d6df3, 0x4d6df3, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x4d6df3, 0x4d6df3, 0x0e1ce6, 0x000000, 0x000000, 0x000000, 0xe85500, 0xe85500, 0xe85500, 0xe85500, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xe85500, 0xe85500, 0xe85500, 0xe85500, 0x000000, 0xe85500, 0xe85500, 0xe85500, 0xe85500, 0x000000, 0xe85500, 0xe85500, 0xe85500, 0xe85500, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x000000, 0x000000, 0xe85500, 0xff7e00, 0xff7e00, 0xe85500, 0x000000, 0xe85500, 0xff7e00, 0xff7e00, 0xe85500, 0x000000, 0xe85500, 0xff7e00, 0xff7e00, 0xe85500, 0x000000, 0x990030, 0xcf1d55, 0xcf1d55, 0x990030, 0x000000, 0x0e1ce6, 0x4d6df3, 0x4d6df3, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x4d6df3, 0x4d6df3, 0x0e1ce6, 0x000000, 0x000000, 0x000000, 0xe85500, 0xff7e00, 0xff7e00, 0xe85500, 0x000000, 0xe85500, 0xff7e00, 0xff7e00, 0xe85500, 0x000000, 0xe85500, 0xff7e00, 0xff7e00, 0xe85500, 0x000000, 0x990030, 0xcf1d55, 0xcf1d55, 0x990030, 0x000000, 0x0e1ce6, 0x4d6df3, 0x4d6df3, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x4d6df3, 0x4d6df3, 0x0e1ce6, 0x000000, 0x000000, 0x000000, 0xe85500, 0xe85500, 0xe85500, 0xe85500, 0x000000, 0xe85500, 0xe85500, 0xe85500, 0xe85500, 0x000000, 0xe85500, 0xe85500, 0xe85500, 0xe85500, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
gameover_screen: .word 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0xed1c24, 0xffffff, 0xffffff, 0xffffff, 0xed1c24, 0xffffff, 0xffffff, 0xffffff, 0xed1c24, 0xffffff, 0xffffff, 0xed1c24, 0xffffff, 0xffffff, 0xed1c24, 0xffffff, 0xffffff, 0xffffff, 0xed1c24, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0xed1c24, 0xffffff, 0xed1c24, 0xed1c24, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xed1c24, 0xed1c24, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xffffff, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xffffff, 0xffffff, 0xed1c24, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xed1c24, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xed1c24, 0xed1c24, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0xed1c24, 0xffffff, 0xffffff, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xed1c24, 0xed1c24, 0xed1c24, 0xffffff, 0xed1c24, 0xffffff, 0xffffff, 0xffffff, 0xed1c24, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0xed1c24, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xffd500, 0xffd500, 0xffd500, 0x000000, 0x000000, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffd500, 0xfff019, 0xfff019, 0xffd500, 0x000000, 0x000000, 0x000000, 0x520e80, 0x6f3198, 0x6f3198, 0x520e80, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0xffffff, 0x000000, 0xffffff, 0x000000, 0x000000, 0x000000, 0xffd500, 0xfff019, 0xfff200, 0xffd500, 0x000000, 0x000000, 0x000000, 0x520e80, 0x520e80, 0x520e80, 0x520e80, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xffd500, 0xffd500, 0xffd500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x16de23, 0x16de23, 0x16de23, 0x16de23, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xffd500, 0xffd500, 0xffd500, 0x000000, 0x000000, 0x000000, 0x16de23, 0xa8e61d, 0xa8e61d, 0x16de23, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xfff200, 0xfff200, 0xffd500, 0x000000, 0x000000, 0x000000, 0x16de23, 0xa8e61d, 0xa8e61d, 0x16de23, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xfff200, 0xfff200, 0xffd500, 0x000000, 0x000000, 0x000000, 0x16de23, 0x16de23, 0x16de23, 0x16de23, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xffd500, 0xffd500, 0xffd500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x16de23, 0x16de23, 0x16de23, 0x16de23, 0x000000, 0x16de23, 0x16de23, 0x16de23, 0x16de23, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xffd500, 0xffd500, 0xffd500, 0x000000, 0xffd500, 0xffd500, 0xffd500, 0xffd500, 0x000000, 0x000000, 0x000000, 0x16de23, 0xa8e61d, 0xa8e61d, 0x16de23, 0x000000, 0x16de23, 0xa8e61d, 0xa8e61d, 0x16de23, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xfff200, 0xfff200, 0xffd500, 0x000000, 0xffd500, 0xfff200, 0xfff200, 0xffd500, 0x000000, 0x000000, 0x000000, 0x16de23, 0xa8e61d, 0xa8e61d, 0x16de23, 0x000000, 0x16de23, 0xa8e61d, 0xa8e61d, 0x16de23, 0x000000, 0x00b7ef, 0x99d9ea, 0x99d9ea, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xfff200, 0xfff200, 0xffd500, 0x000000, 0xffd500, 0xfff200, 0xfff200, 0xffd500, 0x000000, 0x000000, 0x000000, 0x16de23, 0x16de23, 0x16de23, 0x16de23, 0x000000, 0x16de23, 0x16de23, 0x16de23, 0x16de23, 0x000000, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x00b7ef, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffd500, 0xffd500, 0xffd500, 0xffd500, 0x000000, 0xffd500, 0xffd500, 0xffd500, 0xffd500, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff7e00, 0xff7e00, 0xff7e00, 0xff7e00, 0x000000, 0x16de23, 0x16de23, 0x16de23, 0x16de23, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x000000, 0x000000, 0xff7e00, 0xffc20e, 0xffc20e, 0xff7e00, 0x000000, 0x16de23, 0xa8e61d, 0xa8e61d, 0x16de23, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990030, 0xed1c24, 0xed1c24, 0x990030, 0x000000, 0x990030, 0xed1c24, 0xed1c24, 0x990030, 0x000000, 0x000000, 0x000000, 0xff7e00, 0xffc20e, 0xffc20e, 0xff7e00, 0x000000, 0x16de23, 0xa8e61d, 0xa8e61d, 0x16de23, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990030, 0xed1c24, 0xed1c24, 0x990030, 0x000000, 0x990030, 0xed1c24, 0xed1c24, 0x990030, 0x000000, 0x000000, 0x000000, 0xff7e00, 0xff7e00, 0xff7e00, 0xff7e00, 0x000000, 0x16de23, 0x16de23, 0x16de23, 0x16de23, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xff7e00, 0xff7e00, 0xff7e00, 0xff7e00, 0x000000, 0xff7e00, 0xff7e00, 0xff7e00, 0xff7e00, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x0e1ce6, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x990030, 0x990030, 0x990030, 0x990030, 0x000000, 0x000000


screen: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0  # section to display next shape
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0 # section end to display next shape
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	.word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

Black: .word 0x000000
Light_grey: .word 0x00D3D3D3
Grey: .word 0x1b1b1b
Dark_grey: .word 0x17161A
Z_color: .word 0x34e062  #green
Z1: .word 1,0
    .word 1,1
    .word 0,1
    .word 0,2    
Z0: .word 0,0
    .word 1,0
    .word 1,1
    .word 2,1
S_color: .word 0xf000e0  # purpley
S0: .word 1,1
    .word 2,0
    .word 1,0
    .word 0,1
S1: .word 0,0
    .word 0,1
    .word 1,1
    .word 1,2
O_color: .word 0xd61c32 # red
O: .word 0,0
   .word 1,1
   .word 0,1
   .word 1,0
T_color: .word 0x3a0db8  # blue
T0: .word 1,1
    .word 0,1
    .word 1,0
    .word 2,1   
T1: .word 1,0
    .word 1,1
    .word 0,1
    .word 1,2 
T2: .word 1,1
    .word 0,1
    .word 1,2
    .word 2,1
T3: .word 1,1
    .word 2,1
    .word 1,0
    .word 1,2
L_color: .word 0xf0d000  # yellow / orange
L0: .word 0,0
    .word 0,1
    .word 0,2
    .word 1,2
L1: .word 0,1
    .word 1,1
    .word 2,1
    .word 2,0
L2: .word 0,0
    .word 1,0
    .word 1,1
    .word 1,2
L3: .word 0,1
    .word 0,2
    .word 1,1
    .word 2,1
J_color: 0x00ecf0 # teal
J0: .word 1,0   #
    .word 1,1   #
    .word 1,2 # #
    .word 0,2
J1: .word 0,1
    .word 1,1 # # #
    .word 2,1     #
    .word 2,2
J2: .word 0,0  # #
    .word 1,0  #
    .word 0,1  #
    .word 0,2
J3: .word 0,0
    .word 0,1 #
    .word 1,1 # # #
    .word 2,1
I_color: .word 0xeb840e
I0: .word 2,0
    .word 2,2
    .word 2,1
    .word 2,3
I1: .word 0,1
    .word 1,1
    .word 2,1
    .word 3,1
I2: .word 1,0
    .word 1,1
    .word 1,2
    .word 1,3
I3: .word 0,2
    .word 1,2
    .word 2,2
    .word 3,2      
curShape: .word Z0
nextShape: .word O
nextRotation: .word Z1
shapes: .word Z0, Z1, Z0, Z1, O, O, O, O, T0, T1, T2, T3, S0, S1, S0, S1, L0, L1, L2, L3, J0, J1, J2, J3, I0, I1, I2, I3




.text
.eqv BASE_ADDRESS 0x10008000  

.text

.globl main
main:
	li $s5, BASE_ADDRESS # address of the bitmap display
	
	li $s4, 40  # counter to know when to apply gravity to the shape
	li $s3, 400  # coutner for the timer, to know when do shorten the counter to apply gravity

init:
	li $s0, 5 # this keep track of which shape we are currently drawing, each number maps to a shape. 5 is Z0
	li $s1, 0 # y
	li $s2, 6 # x

	
#########################################################################
# GAME STATES
#############################################################################	
################ INTRO ##########################
introState:
	li $t9, 0xffff0000
    	lw $t8, 0($t9)   # check whether a key was pressed
   	beq $t8, 1, intro_key_pressed
   	addi $sp, $sp, -4
   	la $t0, main_screen
   	sw $t0, 0($sp)  # push the address of the intro screen to the stack
   	addi $sp, $sp, -4
   	li $t8, 0
   	sw $t8, 0($sp) # push an identifier for the intro screen (lets the drawStatic label know which state to return to)
    	j drawStatic  #draw the screen
intro_key_pressed:
	lw $t2, 4($t9)
	beq $t2, 0x71, exit # player wants to quit game by pressing Q
	beq $t2, 0x20, clearScreen  #player wants to start a new game, pressing space
	j introState
clearScreen:
	li $t8, 0x1  # get the tile colors
	li $t9, 0x2 # get the grey tile color
	la $t0, screen
	addi $t0, $t0, 132
	li $t2,0 # these will be fake x, to help us know which tile should be dark grey or medium grey
	li $t3,0 # these will be fake y
	li $t1, 480 # counter on total # of tiles to color

	
	clearLoop:
		beqz $t1, finishedClear
		beq $t2, 16, clearNextRow
		add $t6, $t2, $t3 # sum of x and y
		andi $t7, $t6, 1 # check if the x + y is even 
		beqz $t7, reColorDG # if even, color it dark grey
		
		sw $t9, 0($t0)  # x+y is odd, so color it medium grey
		addi $t0, $t0, 4
		addi $t1, $t1, -1
		addi $t2, $t2, 1  # increment x
		j clearLoop
		
	reColorDG:
		sw $t8, 0($t0)
		addi $t0, $t0, 4
		addi $t1, $t1, -1
		addi $t2, $t2, 1
		j clearLoop
	clearNextRow:
		li $t2, 0  # reset x position to 0
		addi $t3, $t3, 1  # increment y position by 1
		addi $t0, $t0, 64 # mvoe memory address to the next row
		j clearLoop 
	finishedClear:
		li $s0, 5  #reset the shape counter
		jal changeShape # reset the curShape pointer to the appropriate shape
		li $s1, 0 # reset the y position
		li $s2, 6 # reset the x position
		li $s4, 30 # reset the shape fall speed
		li $s3, 200 # reset the timer
		j clearSidePanel  # need to also clear the side panel of next shape
clearSidePanel:
	la $a0, screen
	addi $t0, $a0, 1876 
	li $t8, 0x3
	li $t1, 16  # total 2x2 tiles we need to erase
	li $t2, 4  # row counter
	clearPanelLoop:
		beqz $t1, updateScreenToGameLoop
		beqz $t2, nextPanelRow
		sw $t8, 0($t0)
		sw $t8, 4($t0)
		sw $t8, 128($t0)
		sw $t8, 132($t0)
	
		addi $t0, $t0, 8  # move position in memory to next tile
		addi $t2, $t2, -1
		addi $t1, $t1, -1
		j clearPanelLoop
	
	nextPanelRow:
		li $t2, 4
		addi $t0, $t0, 224 # move to the next row in the array
		j clearPanelLoop
################# GAME LOOP ############################
gameLoop:
	addi $s6, $s6, 1  # increment counter to know when to call 'fall'
	addi $s3, $s3, -1  # decrement timer
    	bgt $s6, $s4, fall # if couter exceeds $s4, call fall
    	beqz $s3, resetTimer # if the Timer reaches 0, reset it
    	
    	Get_Keys:
		li $t9, 0xffff0000
    		lw $t8, 0($t9)   # check whether a key was pressed
    		beq $t8, 1, key_pressed
    		j updateScreenToGameLoop
	
key_pressed:
	lw $t2, 4($t9)
	beq $t2, 0x61, left
	beq $t2, 0x64, right
	beq $t2, 0x73, drop
	beq $t2, 0x77, rotate
	beq $t2, 0x70, pauseState
	j gameLoop
sleep:
	li $v0, 32
	la $a0, 100
	syscall
	jr $ra
exit:
	li $v0, 10
	syscall
resetTimer:
	addi $s4, $s4, -1 # decrement $s4, so the shape will now fall faster
	beq $s4, 0xA, stopTimer  # if $s4 reaches 10, stop using the timer
	li $s3, 400 # reset the timer otherwise
	j Get_Keys
stopTimer:
	li $s3, -1 # so now $s3, will never be 0, so the timer wont be reset
	j Get_Keys
#################### GAME OVER ##########################
gameOver:
	Get_Keys_GameOver:
		li $t9, 0xffff0000
    		lw $t8, 0($t9)   # check whether a key was pressed
    		beq $t8, 1, key_pressed_gameover
    		addi $sp, $sp, -4
    		la $t0, gameover_screen
    		sw $t0, 0($sp)	# push address of gameover screen to stack
    		addi $sp, $sp, -4
    		li $t8, 2
    		sw $t8, 0($sp)  # push gameover screen identifier
    		j drawStatic
key_pressed_gameover:  # check if they press R, we restart new match. if they press anything else, we go to main
	lw $t2, 4($t9)
	beq $t2, 0x72, clearScreen  # press R
	beq $t2, 0x20, introState  # press space
	beq $t2, 0x1B, introState # press escape
	j gameOver
	
	
################# PAUSE ############################
pauseState:
	li $t9, 0xffff0000
    	lw $t8, 0($t9)   # check whether a key was pressed
   	beq $t8, 1, pause_key_pressed
   	addi $sp, $sp, -4
   	la $t0, pause_screen
   	sw $t0, 0($sp)
   	addi $sp, $sp, -4
   	li $t8, 1
   	sw $t8, 0($sp)
    	j drawStatic
pause_key_pressed:
	lw $t2, 4($t9)
	beq $t2, 0x70, updateScreenToGameLoop   #player wants to resume game
	beq $t2, 0x1B, introState # player wants to go back to intro
	j pauseState
#############################################################################################################
#  SCREEN DRAWING GAME ACTIVE
#################################################################################################################
updateScreenToGameLoop:
	jal updateScreen
	j gameLoop

updateScreen:  # function to draw the active game screen from memory
	move $t2, $s5
	la $t3, screen
	li $t1, 1024	# total tiles to cover
updateScreenLoop:
	beq $t1, 0x0, endUpdateLoop
	lw $t4, 0($t3)
	beq $t4, 0x0, colorLG
	beq $t4, 0x1, colorDG
	beq $t4, 0x2, colorG
	beq $t4, 0x3, colorB
	ble $t4, 0x8, colorZ
	ble $t4, 0xC, colorO # 12 in jex
	ble $t4, 0x10, colorT # 16 in hex
	ble $t4, 0x14, colorS # 20 in hex
	ble $t4, 0x18, colorL  #24 in hex
	ble $t4, 0x1C, colorJ
	ble $t4, 0x20, colorI
colorB:	
	li $t8, 0x0
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorI:
	la $a0, I_color
	lw $t8, 0($a0)
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorS:
	la $a0, S_color
	lw $t8, 0($a0)
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorJ:
	la $a0, J_color
	lw $t8, 0($a0)
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorL:
	la $a0, L_color
	lw $t8, 0($a0)
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorO:
	la $a0, O_color
	lw $t8, 0($a0)
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorT:
	la $a0, T_color
	lw $t8, 0($a0)
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorZ:
	la $a0, Z_color
	lw $t8, 0($a0)
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorLG:
	li $t8, 0x00D3D3D3
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
colorDG:
	li $t8, 0x17161A
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
	
colorG:
	li $t8, 0x1b1b1b
	sw $t8, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j updateScreenLoop
endUpdateLoop:
	jr $ra 
###################################################################################
#  SCREEN DRAWING STATIC
#######################################################################################
drawStatic: # receive the address of the screen to draw from the stack
	lw $t3, 4($sp) # get the address
	lw $t5, 0($sp) # get the return state identifier
	addi $sp, $sp, 8 # pop from stack
	
	move $t2, $s5 # get the base address of bitmap
	li $t1, 1024 # total tiles to cover
	
drawStaticLoop:
	beq $t1, 0x0, endLoop
	lw $t4, 0($t3)
	sw $t4, 0($t2)
	addi $t3, $t3, 4
	addi $t2, $t2, 4
	addi $t1, $t1, -1
	j drawStaticLoop
endLoop:
	beq $t5, 0x0, introState
	beq $t5, 0x1, pauseState
	beq $t5, 0x2, gameOver

#############################################################################################3
# GAME STATE CHECKS
################################################################################################
updateShape:
	bge $s0 0x1D, resetShape  # if the shape counter if over 29, the next shape should reset back to 5
	andi $t0, $s0, 3 # check if its divisible by 4
	beqz $t0, divisibleBy4
	li $t3, 4 # get 4
	div $s0, $t3  #calculate the remainder when $s0 is divided by 4
	mfhi $t2 # load the remainder in to $t2
	li $t3, 5
	sub $t4, $t3, $t2  # 5 - $s0 % 4
	add $s0, $s0, $t4  #add the remainder to $s0, so $s0
	jr $ra	
	resetShape:
		li $s0, 5
		jr $ra
	divisibleBy4:
		addi $s0, $s0, 1  # increment counter by 1
		jr $ra
gameOverCheck:
	la $a0, screen
	addi $t2, $a0, 132
	li $t1, 16 # counter to check the top row of the screen, to see if any blocks will collide there
	gameOverLoop:
		beqz $t1, notGameOver
		lw $t5, 0($t2)
		beq $t5, 0x2, gameOverNext# check if its grey
		beq $t5, 0x1, gameOverNext# check if its dark grey
		
		j gameOverTrue
	gameOverNext:
		addi $t1, $t1, -1
		addi $t2, $t2, 4
		j gameOverLoop
	gameOverTrue:
		j gameOver
	notGameOver:
		jr $ra

###########################################################################
# COLLISIONS
###########################################################################			
collisionHappened:
	bnez $t8, continue # the collision was from move right / left or rotate
	jal rowCheck # check if any rows have been completed, and erase them
	beq $v0, 0x2, shiftRowPosition  # shift the rows above the cleared row down
	resetNewBlock:
		li $s1, 0  #reset y
		li $s2, 6 #reset x
		li $v1, 0 #reset v1
		li $s6, 0 #reset 'fall' counter
		jal gameOverCheck
		jal updateShape  # update the shape coutner
	
		jal changeShape  # update the curShape pointer
	
		jal eraseBigShape  #erase the shape on the sidepanel
		jal drawBigShape	# draw the next shape to be on the side panel
		j updateScreenToGameLoop  
	
	continue:
		li $s6, 0
		j updateScreenToGameLoop

rotationCollisionCheck:
	li $a3, 0  # reset $a3, which identified that we had a collision check
	andi $t9, $s0, 3 # check if s0 is multiple of 4
	beqz $t9, decrementRotation	
	addi $t8, $s0, 1 # get the shape counter number of the next rotation
	j getNextRotationAddress
decrementRotation:
	addi $t8, $s0, -3  # get the shape counter number of the next rotation
getNextRotationAddress:
	addi $t8, $t8, -5
	sll $t8, $t8, 2 # multiply by 4
	la $a0, shapes
	add $t4, $a0, $t8 # address in shape array
	lw $t0, 0($t4)  #address of the next rotation shape in memory
	li $t1, 32
	j collisionLoop
	
	
collisionCheck:
	move $t8, $a0 # get the x offset
	move $t1, $a1 # get the y offset
	
	lw $t3, 0($sp) # get the current position
	addi $sp, $sp, 4 # pop
	
	# calculate the position to simulate to
	sll $t8, $t8, 2 # multiply x by 4
	mul $t2, $t1, 128 # multiply y by 128
	add $t3, $t3, $t8
	add $t3, $t3, $t2 # position on the screen memory we want to check
	
	#use a2 as an argument variable to know we if we check collision for curent shape, or its rotation
	bnez $a3, rotationCollisionCheck
	
	la $a0, curShape
	lw $t0, 0($a0) # address of the shape in memory
	

	li $t1, 32  # counter
	collisionLoop:
		beqz $t1, noCollision
		lw $t4 0($t0) #x of the block of shape
		lw $t5, 4($t0)#y of the 1st block of shape
		
		sll $t4, $t4, 2 # multiple x by 4
		mul $t6, $t5, 128 # multiply y by 128
		li $t7, 0
		add $t7, $t3, $t4  # use new reg t7 to preserve the $t3 address
		add $t7, $t7, $t6  # this is the position on the bitmap display
		
		lw $t2, 0($t7) # the number-color-code of the that position
		addi $t0, $t0, 8
		addi $t1, $t1, -8
		beq $t2, 0x1, collisionLoop
		beq $t2, 0x2, collisionLoop
		j collisionDetected
		# a collision happened	
	noCollision:
		li $v1, 0
		jr $ra

	collisionDetected:
		li $v1, 1
		jr $ra
###########################################################################
# MOVEMENT
###############################################################################
moveDown:
	addi $s1, $s1, 1
	jr $ra	 	
moveRight:
	addi $s2, $s2, 1
	jr $ra
moveLeft:
	addi $s2, $s2, -1
	jr $ra
fall:
	li $t8, 0   # signal that we called 'fall', so the collisionCheck know
	jal calc_Pos
	jal eraseShape
	li $a0, 0 # x offset for the collision check
	li $a1, 1 # y offset for the collision checker
	jal calc_Pos
	jal collisionCheck
	jal calc_Pos
	beq $v1, 0x1, drawShape # we had a collision
	jal moveDown 
	jal calc_Pos
	li $s6, 0 # reset the fall counter
	j drawShape

right:
	li $t8, 1 # this will let us know if we encounter a collision from a movement other than fall
	jal calc_Pos
	jal eraseShape
	li $a0, 1
	li $a1, 0
	jal calc_Pos
	jal collisionCheck
	beq $v1, 0x1, fall # we collided with the right wall, don't change the position
	jal moveRight
	jal calc_Pos
	j drawShape
	
left:
	li $t8, 1 # this will let us know if we encounter a collision from a movement other than fall
	jal calc_Pos
	jal eraseShape
	li $a0, -1
	li $a1, 0
	jal calc_Pos
	jal collisionCheck
	beq $v1, 0x1, fall  # we collided with the left wall, don't change position
	jal moveLeft
	jal calc_Pos
	j drawShape

drop:
	li $t8, 1 # this will let us know if we encounter a collision from a movement other than fall
	jal calc_Pos
	jal eraseShape
	li $a0, 0
	li $a1, 1
	jal calc_Pos
	jal collisionCheck
	beq $v1, 0x1, fall # we collided on top of a shape, don't change the position
	jal calc_Pos
	jal moveDown
	jal calc_Pos
	j drawShape

rotate:
	li $t8, 1
	jal calc_Pos
	jal eraseShape
	li $a0, 0
	li $a1, 0
	li $a3, 1
	jal calc_Pos
	jal collisionCheck
	beq $v1, 0x1, fall
	andi $t5, $s0, 3 # check if shape counter is multiple of 4
	beqz $t5, decrementShapeNum
	bnez $t5, incrementShapeNum
incrementShapeNum:
	addi $s0, $s0, 1
	jal changeShape
	j fall
decrementShapeNum:
	addi $s0, $s0, -3	
	jal changeShape
	j fall
changeShape:
	addi $t4, $s0, -5
	sll $t4, $t4, 2 # multiply shape counter by 4	 to make it word aligned
	la $a0, shapes # get address of shape array
	la $a1, curShape
	add $t3, $a0, $t4 # the index position of the shapes array
	lw $a2, 0($t3)  # get the value at that index position (an address of a shape)
	sw $a2, 0($a1)   # set that value as the value of curShape
	jr $ra

calc_Pos:  # we need the position in memory, not on the bitmpa
	la $t3, screen
	addi $t3, $t3, 132 # top left corner of the playable area
	sll $t6, $s2, 2 # multiply x by 4 to be word aligned
	mul $t7, $s1, 128  # multiply y by 4 to be word aligned
	add $t5, $t7, $t6
	add $t5, $t5, $t3 # position in memory
	addi $sp, $sp, -4
	sw $t5, 0($sp) # push the position to the stack
	jr $ra
###################################################################
# DRAW AND ERASE
##################################################################

drawShape:
	lw $t3, 0($sp)
	addi $sp, $sp, 4 # pop the memory position from the stack, if no collision happened
	
	la $a0, curShape
	lw $t0, 0($a0)
	
	li $t1, 32

	drawLoop:
		lw $t4 0($t0) #x of the block of shape
		lw $t5, 4($t0)#y of the 1st block of shape
		
		sll $t4, $t4, 2 # multiple x by 4
		mul $t6, $t5, 128 # multiply y by 128
		li $t7, 0
		add $t7, $t3, $t4  # use new reg t7 to preserve the $t3 address
		add $t7, $t7, $t6  # this is the position on the bitmap display
		
		sw $s0, 0($t7) #color the screen memory
		addi $t1, $t1, -8 #decrement counter
		addi $t0, $t0, 8 #increment position in screen memory

	drawNext:
		bnez $t1,drawLoop  # repeat the loop
		beq $v1, 0x1, collisionHappened # a collision occurred
		j updateScreenToGameLoop

eraseShape:
	lw $t3, 0($sp)
	addi $sp, $sp, 4 # pop the memory position from the stack
	
	la $a0, curShape
	lw $t0, 0($a0)
	
	li $t1, 32
	eraseLoop:
		lw $t4, 0($t0)# get the memory x cord value
		lw $t5, 4($t0) # get the memory y coord value
		add $t6, $t4, $t5 # the the x + y value
		add $t6, $t6, $s2 # add the on screen x value
		add $t6, $t6, $s1  # add the on screen y value
		andi $t7, $t6, 1 # check if the sum is even
		beqz $t7, eraseDarkGrey 
		
		eraseGrey:
			sll $t4, $t4, 2 # multiple x by 4
			mul $t6, $t5, 128 # multiply y by 128
			
			li $t7, 0
			add $t7, $t3, $t4  # use new reg t7 to preserve the $t3 address
			add $t7, $t7, $t6  # this is the position on the bitmap display
			
			li $t2, 2
			sw $t2, 0($t7)
			addi $t1, $t1, -8
			addi $t0, $t0, 8
			j eraseNext
		
		eraseDarkGrey:
			sll $t4, $t4, 2 # multiple x by 4
			mul $t6, $t5, 128 # multiply y by 128
			li $t7, 0
			add $t7, $t3, $t4  # use new reg t7 to preserve the $t3 address
			add $t7, $t7, $t6  # this is the position on the bitmap display
			
			li $t2, 1
			sw $t2, 0($t7)
			addi $t1, $t1, -8
			addi $t0, $t0, 8
			j eraseNext
		eraseNext:
			bnez $t1, eraseLoop
			jr $ra

##########################################################################
# ROW CLEARING FUNCTIONALITY
###########################################################################
rowCheck:
	addi $sp, $sp, -4
	sw $ra, 0($sp) # push the return address to the stack
	la $a0, screen
	addi $a0, $a0, 132
	mul $t2, $s1, 128
	add $t2, $t2, $a0 # the left most screen position on the y value we just drew at. preserve this for now
	move $t0, $s1 # copy of the y position
	
	initRowLoop:
		move $t3, $t2
		li $t1, 16
	rowCheckLoop:
		beqz $t1, rowFilled # we found a completely filled row
		lw $t5, 0($t3)
		beq $t5, 0x1, notFilled
		beq $t5, 0x2, notFilled
		addi $t1, $t1, -1
		addi $t3, $t3, 4
		j rowCheckLoop
		
	notFilled:
		addi $t2, $t2, 128 # move the next row lower
		addi $t0, $t0, 1 # move y position copy to next row
		lw $t6, 0($t2) # get a color from the next row
		beq $t6, 0x0, endRowCheck  #check if the color if a border color (we can't check further)
		j initRowLoop  #if its not, then restart the loop
	endRowCheck:
		lw $ra, 0($sp)
		addi $sp, $sp, 4 # pop the saved return address from the stack
		jr $ra #pop the return address from the stack
	rowFilled:
		jal clearRow
		li $v0, 2    # to signal that a row was cleared
		addi $t2, $t2, 128
		addi $t0, $t0, 1
		lw $t6, 0($t2)
		beq $t6, 0x0, endRowCheck
		j initRowLoop
clearRow:
	li $v0, 4
	la $a0, rc
	syscall
	# $t2 is the left most position, and $t0 is a copy of the y position
	li $t9, 0 # this is temporary x position
	li $t5, 0x2
	li $t6, 0x1
	li $t1, 16
	move $t3, $t2 # to preserve $t2 during this call
	clearRowLoop:
		beqz $t1, finishedRowClear
		add $t8, $t9, $t0
		andi $t8, $t8, 1  # check whether the x + y is even
		beqz $t8, clearDG
		
		sw $t5, 0($t3)
		addi $t3, $t3, 4
		addi $t9, $t9, 1
		addi $t1, $t1, -1
		j clearRowLoop
	
	clearDG:
		sw $t6, 0($t3)
		addi $t3, $t3, 4
		addi $t9, $t9, 1
		addi $t1, $t1, -1
		j clearRowLoop
	finishedRowClear:
		jr $ra
##########################################################################3
#  SHIFITING DOWN TO EMPTY ROWS
###############################################################################
highestRowWithBlocks:
	la $a0, screen
	addi $t0, $a0, 132  # first row
	move $t2, $t0
	
	li $t1, 16
	
	checkForHighestRowLoop:
		beqz $t1, checkRowBelow
		lw $t3, 0($t2)
		beq $t3, 0x2, anEmptyUnit
		beq $t3, 0x1, anEmptyUnit
		beq $t3, 0x0, anEmptyUnit
		
		j foundHighestRow
	anEmptyUnit:
		addi $t2, $t2, 4
		addi $t1, $t1, -1
		j checkForHighestRowLoop	
	
	checkRowBelow:
		addi $t0, $t0, 128
		move $t2, $t0
		li $t1, 16
	
		j checkForHighestRowLoop
	foundHighestRow:
		addi $sp, $sp, -4
		sw $t0, 0($sp) # put the left most position of the highest on stack as an argument
		
		j shiftRowPosition

shiftRowPosition:
	# get the current position with a calc_Pos
	#then carry out shiftrow position only until we reach the max colored height (create function to find this position
	
	lw $t9, 0($sp) # get the highest row from the stack
	addi $t9, $t9, -256 # move the position 2 rows above it
	addi $sp, $sp, 4 # pop
				
	la $a0, screen
	addi $t0, $a0, 3844 # bottom of the screen
	addi $sp, $sp, -4
	sw $t0, 0($sp)
	li $s7, 29 # this is the fake y position to start with (at the bottom)

	
	shiftingLoop:
		jal shiftRow
		jal sleep
		jal updateScreen
	shiftTheNextRow:
		addi $t0, $t0, -128
		blt $t0, $t9, endAllShift  # solve problem?
		addi $sp, $sp, -4
		sw $t0, 0($sp) # push position to stack for jalshiftrow
		addi $s7, $s7, -1 # we move the fake 5 position up by 1
		j shiftingLoop
	endAllShift:

		j resetNewBlock
shiftRow:   # registers that are not preserved 18, t1, t4, t3, t6, t7
	lw $t2, 0($sp)   # the address of the row we want to check. get from stack
	addi $sp, $sp, 4
	li $t4, 0 # temporary x
	move $t5, $s7
	addi $sp, $sp, -4
	sw $ra, 0($sp)
	
	shiftAgain:
		addi $sp, $sp, -4
		addi $t3, $t2, 128
		sw $t3, 0($sp)
		jal checkEmptyRow
		li $t4, 0
		li $t1, 16
		beqz $v0, end

	shiftRowLoop:
		beq $t1, $t4 shiftNextRow

		lw $t3, 0($t2)
		
		
		beq $t3, 0x1, iAmDG
		beq $t3, 0x2, iAmG
		sw $t3, 128($t2) # copy it to the unit exactly one below me
		add $t6, $t5, $t4 # add the temp x and y
		andi $t7, $t6, 1 # check if its even or not
		beqz $t7, makeEmptyDG
		
		li $t8, 2
		sw $t8, 0($t2)
		addi $t2, $t2, 4
		addi $t4, $t4, 1
		j shiftRowLoop
		
		makeEmptyDG:
			li $t8, 1
			sw $t8, 0($t2)
			addi $t2, $t2, 4
			addi $t4, $t4, 1
			j shiftRowLoop
		iAmDG:
			li $t8, 2
			sw $t8, 128($t2)
			addi $t2, $t2, 4
			addi $t4, $t4, 1
			j shiftRowLoop
		iAmG:
			li $t8, 1
			sw $t8, 128($t2)
			addi $t2, $t2, 4
			addi $t4, $t4, 1
			j shiftRowLoop
	shiftNextRow:
		addi $t2, $t2, 64
		addi $t5, $t5, 1
		j shiftAgain
	end:
		lw $ra, 0($sp)
		addi $sp, $sp, 4
		jr $ra
		
checkEmptyRow: # registers that are not preserved 18, t1, t4, t3, t6, t7 from shiftrow
	lw $t4, 0($sp)
	addi $sp, $sp, 4  # pop the screen position from the stack of the row we need to check if its empty
	li $t1, 16
	
	checkEmptyRowLoop:
		beqz $t1, rowWasEmpty
		lw $t3, 0($t4)

		beq $t3, 0x1, checkNextUnit
		beq $t3, 0x2, checkNextUnit
		# then we found a pixel thats not a background color (row is not empty)
		
		li $v0, 0
		jr $ra
	checkNextUnit:
		addi $t4, $t4, 4
		addi $t1, $t1, -1
		j checkEmptyRowLoop
	rowWasEmpty:			
		li $v0, 1
		jr $ra

##########################################################################
# DISPLAYING THE NEXT COMING SHAPE
#########################################################################
eraseBigShape:
	la $a0, nextShape
	lw $t0, 0($a0)
	la $a0, screen
	addi $t8, $a0, 1876 
	li $t2, 0x3
	li $t1, 32
	eraseBigLoop:
		lw $t4 0($t0) #x of the block of shape
		lw $t5, 4($t0)#y of the 1st block of shape
		
		sll $t4, $t4, 3 # multiple x by 8 to move accross 2 pixels
		mul $t6, $t5, 256 # multiply y by 256, so you move down 2 pixels
		li $t7, 0
		add $t7, $t8, $t4  # use new reg t7 to preserve the $s4 address (address where 1st of bit goes in memory)
		add $t7, $t7, $t6  # this is the position on the bitmap displayl
		
		sw $t2, 0($t7)
		sw $t2, 4($t7)
		sw $t2, 128($t7)
		sw $t2, 132($t7)
		
		addi $t1, $t1, -8
		addi $t0, $t0, 8
		
	eraseBigNext:
		bnez $t1,eraseBigLoop  # repeat the loop
		jr $ra
		
drawBigShape:
	addi $sp, $sp, -4 
	sw $ra, 0($sp)  #push return address to the stack
#need to get the address of the next shape
	jal getNextShapeNumber
	jal getNextShapeAddress
	
	la $a0, nextShape
	lw $t0, 0($a0) # address of the actual shape that is next
	la $a0, screen
	addi $t8, $a0, 1876 
	
	li $t1, 32
	move $t2, $v0 # this is the number of the next shape
	drawBigLoop:
		lw $t4 0($t0) #x of the block of shape
		lw $t5, 4($t0)#y of the 1st block of shape
		
		sll $t4, $t4, 3 # multiple x by 8 to move accross 2 pixels
		mul $t6, $t5, 256 # multiply y by 256, so you move down 2 pixels
		li $t7, 0
		add $t7, $t8, $t4  # use new reg t7 to preserve the $s4 address (address where 1st of bit goes in memory)
		add $t7, $t7, $t6  # this is the position on the bitmap display
		
		# save the colors in
		sw $t2, 0($t7)
		sw $t2, 4($t7)
		sw $t2, 128($t7)
		sw $t2, 132($t7)
		
		addi $t1, $t1, -8
		addi $t0, $t0, 8
	drawBigNext:
		bnez $t1,drawBigLoop  # repeat the loop
		lw $ra, 0($sp)
		addi $sp, $sp, 4 # pop the return address from the stack
		jr $ra
getNextShapeNumber:
	bge $s0, 0x1D, resetNextShape
	andi $t0, $s0, 3 # check if $s0 is divisble by 4
	beqz $t0, divisibleBy4Next
	li $a0, 4
	div $s0, $a0
	mfhi $t3
	li $a0, 5
	sub $t4, $a0, $t3
	add $v0, $s0, $t4 # $t2 will hold the number corresponding to next shape
	jr $ra
	resetNextShape:
		li $v0, 5
		jr $ra
	divisibleBy4Next:
		addi $v0, $s0, 1
	
getNextShapeAddress:
	# now we need to get the address of that shape
	addi $t4, $v0, -5
	sll $t4, $t4, 2 # multiple shape counter by 4	 
	la $a0, shapes # get address of shape array
	la $a1, nextShape
	add $t3, $a0, $t4 # the index position of the shapes array
	lw $a2, 0($t3)  # get the value at that index position (an address of a shape)
	sw $a2, 0($a1)   # set that value as the value of curShape	
	jr $ra
